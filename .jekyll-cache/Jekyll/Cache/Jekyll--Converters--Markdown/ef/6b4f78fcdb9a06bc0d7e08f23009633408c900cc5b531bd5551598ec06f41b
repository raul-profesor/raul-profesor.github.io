I"Á,<h2 id="explicaci√≥n-te√≥rica">Explicaci√≥n te√≥rica</h2>

<h3 id="qu√©-es-json">¬øQu√© es JSON?</h3>
<p>JSON es el acr√≥nimo de JavaScript Object Notation y es un formato basado en texto para transmitir informaci√≥n entre aplicaciones web. Almacena la informaci√≥n de una forma tal que hace muy f√°cil el acceder a ella, tanto para desarrolladores como para las m√°quinas.</p>

<p>Tambi√©n puede ser usado como formato de datos por cualquier lenguaje de programaci√≥n y de heco se est√° convirtiendo r√°pidamente en la sintaxis preferida para las APIs, superando a XML.</p>

<h3 id="qu√©-es-un-json-web-token-jwt">¬øQu√© es un JSON Web Token (JWT)?</h3>

<p>JWT es ya una t√©cnica muy popular para securizar APIs, as√≠ como ha conseguido (y sigue haci√©ndolo) gran popularidad tambi√©n en muchos CTF.</p>

<p>En esencia, JWT es un est√°ndar abierto utiliziado para compartir informaci√≥n entre dos partes, cliente y servidor. Cada JWT incluye objetos JSON codificados. Los JWT se firman utilzando algoritmos criptogr√°ficos con el fin de asegurar que no han sido modificados una vez han sido emitidos.</p>

<p>Dos de sus grandes ventajas son:</p>

<ul>
  <li><strong>Compactos:</strong> debido a su tama√±o, se pueden enviar en una URL, como un par√°metro POST o dentro de una cabecera HTTP. Adem√°s, este reducido tama√±o hace que la transmisi√≥n sea m√°s r√°pida.</li>
  <li><strong>Autocontenidos:</strong> el ‚Äúpayload‚Äù contiene toda la informaci√≥n que se necesita del usuario, evitando as√≠ consultar a la base de datos m√°s de una vez.</li>
</ul>

<h3 id="cu√°ndo-usar-jwts">¬øCu√°ndo usar JWTs?</h3>

<p>Hay dos escenarios donde este tipo de token es √∫til:</p>

<ul>
  <li>
    <p><strong>Autenticaci√≥n:</strong> Es el escnario t√≠pico en el que se usan los JWTs. Una vez logueado, cada petici√≥n a partir de ese momento ir√° acompa√±ada del JWT, permitiendo el acceso a las rutas, servicios y recursos que correspondan a ese token.</p>
  </li>
  <li>
    <p><strong>Intercambio de informaci√≥n:</strong> Los JWTs son una buena forma de transmitir informaci√≥n de forma segura entre las partes porque estos tokens pueden firmarse, por ejemplo con claves p√∫blica/privada. Esto tambi√©n permite aseugrar la integridad puesto que la firma se calcula usando la informaci√≥n del token, el header y el payload, que veremos a continuaci√≥n.</p>
  </li>
</ul>

<h3 id="estructura-de-un-jwt">Estructura de un JWT</h3>

<p>Un JWT est√° formado por tres partes separadas por un punto entre ellas. Estas partes se conocen como:</p>
<ul>
  <li>Header</li>
  <li>Payload</li>
  <li>Signature</li>
</ul>

<p>Por lo que el formato t√≠pico de un JWT ser√≠a: <code class="language-plaintext highlighter-rouge">xxxxxxx.yyyyyyy.zzzzzzz</code></p>

<p><img src="../img/jwt/jwt-structure.webp" alt="" /></p>

<h4 id="header">Header</h4>
<p>En header t√≠picamente tiene dos partes: el tipo de token <code class="language-plaintext highlighter-rouge">typ</code> y el algoritmo de firma utilizado <code class="language-plaintext highlighter-rouge">alg</code>.</p>

<p>Se pueden utilizar multitud de algoritmos pero los m√°s conocidos son:</p>

<ul>
  <li>
    <p><strong>HS256:</strong> Sim√©trico, es decir, utiliza el mismo secret para firmar que para verificar. M√°s r√°pido ya que el procesado es m√°s sencillo y el token resultante m√°s peque√±o.</p>
  </li>
  <li>
    <p><strong>RS256:</strong> Asim√©trico (par de claves p√∫blica/privada). La clave privada se utiliza en el firmado y la p√∫blica para verificar la firma.</p>
  </li>
</ul>

<p>Por √∫ltimo, este JSON se codificada en formato <code class="language-plaintext highlighter-rouge">Base64Url</code></p>

<h4 id="payload">Payload</h4>
<p>La segunda parte del token es el payload, que contiene los conocidos como <code class="language-plaintext highlighter-rouge">claims</code>. Estos <code class="language-plaintext highlighter-rouge">claims</code> hacen referencia, por norma general, a datos del usuario y metadatos adicionales. Pueden ser de tres tipos:</p>

<ul>
  <li><strong>Reserved:</strong> Son claims predefinidos, que si bien no son obligatorios, son bastante recomendados.</li>
  <li><strong>Public:</strong> Se pueden definir a voluntad por aquellos que usen los JWTs. No obstante, para evitar colisiones, se deben definiar en la IANA JSON Web TOken Registry.</li>
  <li><strong>Private:</strong> Son claims customizados creados con el fin de compartir informaci√≥n entre las partes que han acordado utilizarlos.</li>
</ul>

<p>El payload, como ve√≠amos en la imagen de arriba, tambi√©n se codifica en <code class="language-plaintext highlighter-rouge">Base64Url</code>.</p>

<h4 id="signature">Signature</h4>

<p>Para la firma, se utiliza la parte codificada del header, la parte codificada del payload, un <code class="language-plaintext highlighter-rouge">secret</code> y el algoritmo especificado en el header. Un ejemplo de esto en pseudoc√≥digo ser√≠a:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)
</code></pre></div></div>

<p><strong>Atenci√≥n</strong></p>

<p>Firmar el token asegura su integridad, es decir, nos certifica que la informaci√≥n que contiene no ha sido modificada. No obstante, este token est√° codificado, que no cifrado, por lo que cualquier informaci√≥n que contenga podr√° ser visualizada sin problemas.</p>

<p>Para asegurar la confidencialidad de los datos, se recomienda utilizar cifrado, como por ejemplo HTTPS entre los participantes de la conversaci√≥n.</p>

<h2 id="caso-pr√°ctico">Caso pr√°ctico</h2>

<p>Vamos a ver algunos casos de mala utilizaci√≥n de los JWTs y de qu√© manera pueden ser ‚Äúabusados‚Äù. Para ello vamos a utilizar <a href="https://jwt-lab.herokuapp.com/challenges">un estupendo laboratorio</a> que alguien ha tenido a bien montar para que cualquiera pueda usarlo. En este laboratorio hay una serie de <a href="https://jwt-lab.herokuapp.com/challenges">challenges</a> a realizar. Veamos algunos de ellos.</p>

<h3 id="vulnerabilidad-none-algorithm-">Vulnerabilidad ‚Äúnone algorithm ‚Äú</h3>

<p>JWT permite utilizar para el claim <code class="language-plaintext highlighter-rouge">alg</code> el valor <code class="language-plaintext highlighter-rouge">none</code>. Es decir, si sustituimos el algoritmo de firma que se est√© utilizando por el valor none y dejamos el campo <code class="language-plaintext highlighter-rouge">signature</code> vac√≠o, el token ser√° considerado como correcto y podremos suplantar a otros usuarios.</p>

<p>Veamos c√≥mo proceder.</p>

<ol>
  <li>
    <p>En primer lugar registraremos un nuevo usuario que ser√° el que utilicemos para todas nuestras subsiguientes pruebas. Si accedemos al link: https://jwt-lab.herokuapp.com/users/new y rellenamos los datos, tendremos listo nuestro usuario:
  <img src="../img/jwt/jwt1.png" alt="" /></p>
  </li>
  <li>
    <p>Tras ello, nos dirigimos a la URL para este challenge: https://jwt-lab.herokuapp.com/authentication/none y nos logueamos con el usuario que acabamos de crear
<img src="../img/jwt/jwt2.png" alt="" /></p>
  </li>
  <li>
    <p>Si examinamos las peticiones y respuestas del proceso de login, veremos que tal y como dicta la teor√≠a, tras realizarse el proceso de login, se genera y se devuelve un JWT al cliente:
<img src="../img/jwt/jwt3.png" alt="" /></p>

    <p>Que es el que el cliente efectivamente utiliza a partir de ese momento en sus peticiones:
   <img src="../img/jwt/jwt4.png" alt="" /></p>
  </li>
  <li>
    <p>Vamos a ver como ser√≠a este token decodificado. Env√≠amos la petici√≥n al <em>repeater</em> de Burp y el token al plugin <strong>JSON Web Tokens</strong>:
<img src="../img/jwt/jwt5.png" alt="" /></p>

    <p>Y de esta forma podemos observar el algoritmo que se est√° utilizando para la firma en el Header y el nombre el usuario en el Payload, as√≠ como la firma en la parte del Signature.
   <img src="../img/jwt/jwt6.png" alt="" /></p>
  </li>
  <li>
    <p>Si ahora, utilizando el plugin previamente mencionado, le decimos que vamos a realizar un <code class="language-plaintext highlighter-rouge">Alg None attack</code> y adem√°s, le decimos que vamos a suplantar al usuario <code class="language-plaintext highlighter-rouge">admin</code>, dejando adem√°s el campo Signature vac√≠o:
<img src="../img/jwt/jwt7.png" alt="" /></p>

    <p>Y reenviamos esta petici√≥n:
<img src="../img/jwt/jwt8.png" alt="" /></p>

    <p>Hemos conseguido convertirnos en <code class="language-plaintext highlighter-rouge">admin</code>, puesto que al admitirse el valor <em>none</em> para <em>alg</em>, este token se considera v√°lido y nos identifica de forma correcta.</p>
  </li>
</ol>

<h2 id="no-se-comprueba-el-signature">No se comprueba el ‚Äúsignature‚Äù</h2>

<p>Un gran fallo de seguridad al utilizar JWT es que no se comprueba el valor del <code class="language-plaintext highlighter-rouge">signature</code> cuando se recibe en el servidor. As√≠ pues, un usuario malintencionado podr√≠a utilizar un signature inv√°lido y hacer pasar el token por v√°lido para, de esta forma, suplantar a otro usuario.</p>

<p>Veamos c√≥mo proceder:</p>

<ol>
  <li>
    <p>Identificamos la petici√≥n inicial correcta, con la firma correspondiente y el usuario original <code class="language-plaintext highlighter-rouge">raul-jwt</code>
 <img src="../img/jwt/jwt15.png" alt="" /></p>
  </li>
  <li>
    <p>Si eliminamos la firma y le decimos que queremos suplantar la identidad del usuario <code class="language-plaintext highlighter-rouge">admin</code>, al no comprobarse la firma, tendremos √©xito en nuestros maliciosas intenciones:
   <img src="../img/jwt/jwt16.png" alt="" /></p>
  </li>
</ol>

<h2 id="el-valor-del-signature-no-es-lo-suficientemente-robusto">El valor del ‚Äúsignature‚Äù no es lo suficientemente robusto</h2>
<p>Si el valor utilizado para la firma no es lo suficientemente robusto, podr√≠a ser susceptible a ataques de fuerza bruta. Veamos la demostraci√≥n:</p>

<ol>
  <li>
    <p>En primer lugar accedemos a la URL para este challenge: https://jwt-lab.herokuapp.com/authentication/signature y nos logueamos con nuestro usuario.
<img src="../img/jwt/jwt11.png" alt="" /></p>
  </li>
  <li>
    <p>Volvemos a identificar el nuevo token:
 <img src="../img/jwt/jwt12.png" alt="" /></p>
  </li>
  <li>
    <p>Con la ayuda de hashcat el diccionario rockyou.txt, crackeamos el valor del secreto utilizdo para generar la firma:
 <img src="../img/jwt/jwt13.png" alt="" /></p>
  </li>
  <li>
    <p>Y comprobamos que haciendo uso de este valor crackeado podemos convertirnos en el usuario admin, recalculando el valor de la firma:
 <img src="../img/jwt/jwt14.png" alt="" /></p>
  </li>
</ol>

<p>Y, por si alguien estuviera interesado, existen algunos challenges m√°s en el laboratorio, as√≠ como los <a href="https://adamc95.medium.com/json-web-token-lab-guide-c402857fa44c">walkthroughs</a> correspondientes en la p√°gina del autor.</p>

<h2 id="referencias">Referencias:</h2>

<p><a href="https://sh3llcon.org/jwt-for-beginners/">Shellcon</a></p>

<p><a href="https://auth0.com/learn/json-web-tokens/">Auth0</a></p>

<p><a href="https://www.akana.com/blog/what-is-jwt">Akana</a></p>

<p><a href="https://blog.miniorange.com/what-is-jwt-json-web-token-how-does-jwt-authentication-work/">Miniorange</a></p>

<p><a href="https://adamc95.medium.com/json-web-token-lab-guide-c402857fa44c">Challenges walkthroughs</a></p>
:ET